a) A complier translates a high level language into object code, without running it. An interpreter executes source code one instruction at a time, it does not translate the source code.
b) The syntactic analysis checks that the program is well formed and determines its phrase structure whilst contextual analysis checks whether or not the source program (represented by an AST) satisfies the source language's scope and type rules.
c) ANTLR uses the grammar file to generate a lexer and a parser which are java classes named FunParser and FunLexer.
The lexer is generated from the lexical rules in the grammar file and is used to generate a token string from a source file.
The parser is generated from context-free rules in the grammar file, such as those defining com or seq_com it is a modified form of recursive-descent parser that contains a parsing method for each nonterminal ie com() seq_com() etc. When run, the parser will accept a token stream and build an AST. in accordance with the tree building operations following the '->' in the file.
d) ANTLR uses to tree grammar file to generate a code generator, which is a java class named FunEncoder
FunEncoder is generated from tree patterns and actions in the tree grammar file. It is a depth first left-to-right tree walker, When run, it pattern-matches the AST and preforms the associated actions in the braces for each pattern. These actions perform address allocation and SVN code selection including, when needed, patching of forward jumps.
e)
grammer)
...
loop
      : LOOP COLON com+ EXIT WHEN com+ DOT
...
LOOP  : 'loop'
EXIT  : 'exit'
WHEN  : 'when'
DOT   : '.'
...
Encoder)
loop
      : ^(LOOP COLON seq_com EXIT WHEN com+ DOT) {
            Let i be the address of the start of the loop, emmit a JUMPTi instruction where it jumps if the first intruction after the WHEN token is true.
                                              }
