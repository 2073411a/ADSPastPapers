a) A Page replacement algorithm is an algorithm that is used to replace a page in memory when a page fault occurs.
b) I would choose an algorithm with a global scope. This is because the randomly updating application will need to change pages frequently, whilst the others, as interactive applications, will not need to change their pages that frequently, therefore most likely won't be encountering page faults all that often.
ci) The second chance algorithm assigns every page currently in memory a reference bit, initially 0, referring to whether or not the page is to be given a second chance or not, and storing this in a FIFO queue. When a page fault occurs, the algorithm works through the queue, checking the reference bit. If the reference bit is 1 it sets it to 0 and sends the page to the back of the queue, then continues checking until it finds one with a reference bit set to 0, which it removes for the list and adds the new page to the back.
ii) The clock variant maintains a circular list of pages in memory, alongside a pointer (hand) indicating which page was last examined, whenever a page fault occurs the algorithm checks from the hand, incrementing along the list each time until it finds one with a reference bit of 0, behaving like the second chance algorithm over this list.
iii) The clock variant would be referred in a situation where the pages needed to be swapped out will occur in order, for example updating elements in a very large array consecutively, as it will continue in order throughout the list.
