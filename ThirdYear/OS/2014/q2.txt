a) A critical section is a section where only one process may be updating the variables at any given point.
b) i)
semaphore s = semaphore # initilise to 1
void task1(){
    s.wait
    do critical section
    s.signal
}
void task2(){
    s.wait
    do critival section
    s.signal
}
ii)
semaphore s = semaphore # initilise to 0
void task1(){
    s.wait
    s.signal
    do task
}

void task2(){
    s.signal
    s.wait
    do task
}
these would, on a uniprocessor, execute in the order 2,1(does task), 2(does task)
c) The pthread join function allows threads to be synchronised by waiting for the other treads to complete before continuing in the main thread.
example:
task one:
int main(){
      pthread[] p1 = {pthread(task1), pthread(task2)....,pthread(taskn)};
      for(int i = 0; i < n; i ++){
          pthread.join(p1[i], NULL); // waits untill all threads are completed
      }
      pthread[] p2 = {pthread(synchronisedTask1) .... pthread(synchronisedTaskn)};
      // Do sycronised stuff here with new tasks
}
