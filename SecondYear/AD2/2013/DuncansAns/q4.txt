4)a)
int max = 0;
for (int i = 0; i < upb + 1;i ++){
	if (s[i] > s[max]) max = i;
}
return max;

b)
// solution, provided by Gregor

for (int i = s.length - 1; i > 0; i--) {
    	swap(s, i, locateMax(s, i));
	}
}

c)


for (int i = s.length - 1; i > 0; i--) { // n
    	swap(s, i, locateMax(s, i));	 // n(n)
	}
}

total n + n*n
=> complexity of O(n^2)
