a)public abstract class Membership{
	private String givenName;
	private String familyName;
	private Date lastPaid;
	public Membership(String givenName, String familyName,Date lastPaid){
		this.givenName = givenName;
		this.familyName = familyName;
		this.lastPaid = lastPaid;
	}
	public String currentFees(Date d){return null;}
	public String payFees(Date d){return null;}
}
b)public class RegularPayment extends Membership{
	private double rate;
	public RegularPayment(String familyName, String givenName, double rate, Date lastPaid){
		super(familyName,givenName,lastPaid);
		this.rate = rate;
	}
	public RegularPayment(String familyName, String givenName, Date lastPaid){
		super(familyName,givenName,lastPaid);
		this.rate = 50.0;
	}
	@Override
	public String currentFees(Date d){
		int months = this.getLastPaid().wholeMonths(d);
		double totalCost = months * rate;
		StringBuilder s = new StringBuilder();
		s.append(this.getGivenName());
		s.append(" ");
		s.append(this.getFamilyName());
		s.append("\n"); // Newline character
		s.append("Number of months since last payment is ");
		s.append(months);
		s.append(". Fees due ");
		s.append(this.moneyFormat(totalCost));
		return s.toString();
	}
	@Override
	public String payFees(Date d){
		StringBuilder s = new StringBuilder();
		s.append(this.getGivenName());
		s.append(" ");
		s.append(this.getFamilyName());
		s.appened(" Regular Payment Customer.\n Fees paid on ");
		s.appened(d.toString());
		this.setLastPaid(d);
		return s.toString();
	}
}
c)public class PerUse extends Membership{
	private class visit{
		public time start;
		public time end;
		public date day;
		public double cost
		public visit(time t1, time t2, day d,double c){start=t1;end=t2;day=d;cost=c*t1.minutesDifference(t2);}
		public int totaltime(){return start.minutesDiference(end);}
	}
	ArrayList<visit> visits = new ArrayList<visit>();
	private double rate;
	public PerUse(String givenName, String familyName, Date lastPaid, double rate){
		super(givenName, familyName, lastPaid);
		this.rate = rate;
	}
	public PerUse(String givenName, String familyName, Date lastPaid){
		super(givenName, familyName, lastPaid);
		this.rate = 0.05;
	}
	@Override
	public String currentFees(Date d){
		StringBuilder s = new StringBuilder();
		s.append(this.getGivenName() + " " this.getFamilyName + "\n[\n");
		double total = 0.0;
		for(visit v : visits){
			s.append("visited club on " + v.day.toString() + ". Minutes sepnt at club = " + v.totaltime() + "charge for this visit: " + this.moneyFormat(v.cost) + ",\n");
			total += v.cost;
		}
		s = new StringBuilder(s.toString().subString(0,s.toString().length() - 2));
		s.append("]\n");
		s.append("Current bill: " this.moneyFormat(total));
		return s.toString();
	}
	public String payFees(Date d){
		StringBuilder s = new StringBuilder();
		s.append(this.getGivenName() + " " this.getFamilyName() + " Per Use Customer.\nFees Paid on " + d.toString());
		visits = new ArrayList<visit>();
		this.setLastPaid(d);
		return s.toString();
	}
}
d)public static void main(String[] args){
	ArrayList<boolean> testResults = new ArrayList<boolean>(); // List of the success or failures of each test
	Day d1 = new Day(1,1,1);
	Day d2 = new Day(2,2,2);
	Day d3 = new Day(1,3,2);
	Time t1 = new Time(1,1,1);
	Time t2 = new Time(2,2,2);
	Time t3 = new Time(2,3,1);
	RegularPayment r1 = new RegularPayment("test","test",d1);
	RegularPayment r2 = new RegularPayment("test2","test2",d2);
	PerUse p1 = New PerUse("test3","test3",d1);
	PerUse p2 = New PerUse("test4","test4",d2);
	testResults.append(d1.wholeMonths(d2) == 13);
	testResults.append(d2.wholeMonths(d3) == 0);
	testResults.append(t1.minutesDifference(t2) == 61);
	testResults.append(t2.minutesDifference(t3) == 0);
	String test1 = p1.currentFees(d2);
	String test2 = Membership.moneyFormat(13*50);
	testResults.append(test.subString(test.length() - test2.length()).equals(test2));
	test1 = p2.currentFees(d3);
	test2 = Membership.moneyFormat(0);
	testResults.append(test.subString(test.length() - test2.length()).equals(test2));
	int count = 0;
	for(boolean b : testResults){
		if(b){
			System.out.println("Test " + count " was a success");
		} else {
			System.out.println("Test " + count " was a failure");
		}
		count ++;
	}
}
e) It would be useful to have an exception to throw if the date in the currentFees or the payFees methods were being given a date before the last paid. It would also be good to have one for attempting to pay fees in the PerUse class if there is no existing fees to pay.
