a) Low coupling refers to a system design where components are mostly independent of each other. High cohesion refers to a high degree of relation betweem functions, whilst also minimising the amount of sources and interactions. These two terms are related in that when implementing one, one also should implement the other in order for the software to efficiently work.
b) The main features of a design pattern are a general template for creating the software, providing solutions to problems occuring in the specific context it is being applied to. A design pattern has well understood properties and trade-offs, as well as any constraints on the pattern.
c)i) I would use the composite pattern, using a super class for timed events. This would make abstract out the issues of finding the duration, as well as allowing sequnces to easily get their total duration, by iterating over a list of both fireworks and squences and adding the duration.
ii) I would use the proxy patteren, as it would allow the original software still to be used, whilst also making a single interface for the client to interact with all the fireworks.
iii) I would use the Observer-Obserable pattern, creating an observer class for the management team, and an observable interface for the fireworks to report any failures to ignite to the observer class.
iv) I would use the facade pattern, treating each of the different system as a different client, being combined into a control class to control the whole system. The clients could be combined to create a single client to interact with the whole system.
